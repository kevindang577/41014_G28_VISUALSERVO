% Part 1: Visual Servoing with Intel RealSense D455 and Harris Corner Detection (Rectangles/Squares)
% Requirements: MATLAB 2024a, Computer Vision Toolbox, Intel RealSense SDK for MATLAB

% Initialize RealSense pipeline
pipeline = realsense.pipeline();
config = realsense.config();

% Configure the pipeline to enable the color stream from D455
config.enable_stream(realsense.stream.color, 640, 480, realsense.format.rgb8, 30);

% Start streaming from the camera
pipeline.start(config);
disp('Starting Intel RealSense D455 stream with Harris Corner Detection...');

try
    % Real-time Video Capture Loop
    while true
        % Wait for the next set of frames
        frameset = pipeline.wait_for_frames();

        % Extract the color frame from the frameset
        color_frame = frameset.get_color_frame();

        % Validate the frame by checking if data exists
        frame_data = color_frame.get_data();
        if isempty(frame_data)
            disp('Invalid frame. Skipping...');
            continue;
        end

        % Convert the RealSense frame to MATLAB image format
        frame = permute(reshape(frame_data, [3, 640, 480]), [3, 2, 1]);

        % Convert to grayscale for corner detection
        grayFrame = rgb2gray(frame);

        % Threshold the grayscale image to create a binary mask
        bw = imbinarize(grayFrame, 'adaptive');  % Adaptive binarization

        % Detect contours of all regions
        stats = regionprops(bw, 'BoundingBox', 'Extent', 'Image');

        % Prepare figure
        imshow(frame);
        hold on;

        % Loop through detected regions and filter rectangular ones
        for i = 1:length(stats)
            % Get the bounding box of the current region
            bbox = stats(i).BoundingBox;
            aspectRatio = bbox(3) / bbox(4);  % Width/Height ratio

            % Skip small regions that are smaller than the filter size (5x5)
            if bbox(3) < 5 || bbox(4) < 5
                continue;
            end

            % Check if the aspect ratio is close to 1 (for squares) or typical for rectangles
            if (aspectRatio > 0.8 && aspectRatio < 1.2) || bbox(3) > 30 || bbox(4) > 30
                % Extract the region's image and detect Harris corners within it
                regionImage = imcrop(grayFrame, bbox);
                regionCorners = detectHarrisFeatures(regionImage);

                % Adjust the corner positions to match the full frame's coordinates
                adjustedCorners = regionCorners.Location + bbox(1:2);

                % Plot the detected corners only for square/rectangle regions
                plot(adjustedCorners(:, 1), adjustedCorners(:, 2), 'ro', 'MarkerSize', 5);
            end
        end

        hold off;

        % Exit loop if 'q' is pressed
        if ~isempty(get(gcf, 'CurrentCharacter')) && get(gcf, 'CurrentCharacter') == 'q'
            disp('Exiting...');
            break;
        end

        % Control frame rate
        pause(0.1);
    end
catch ME
    disp(['Error: ', ME.message]);
end

% Stop the pipeline and release resources
pipeline.stop();
disp('Camera stream stopped.');
